apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: sonarqube-scanner
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Security
    tekton.dev/tags: security
    tekton.dev/displayName: "sonarqube scanner"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    The following task can be used to perform static analysis on the source code
    provided the SonarQube server is hosted

    SonarQube is the leading tool for continuously inspecting the Code Quality and Security
    of your codebases, all while empowering development teams. Analyze over 25 popular
    programming languages including C#, VB.Net, JavaScript, TypeScript and C++. It detects
    bugs, vulnerabilities and code smells across project branches and pull requests.

  workspaces:
    - name: source-dir
    - name: sonar-settings
  params:
    - name: SONAR_HOST_URL
      description: Host URL where the sonarqube server is running
      default: ""
    - name: SONAR_PROJECT_KEY
      description: Project's unique key
      default: ""
  steps:
    - name: sonar-properties-create
      image: registry.access.redhat.com/ubi8/ubi-minimal:8.2
      workingDir: $(workspaces.source-dir.path)
      script: |
        #!/usr/bin/env bash

        replaceValues() {
          filename=$1
          thekey=$2
          newvalue=$3

          if ! grep -R "^[#]*\s*${thekey}=.*" $filename >/dev/null; then
            echo "APPENDING because '${thekey}' not found"
            echo "" >>$filename
            echo "$thekey=$newvalue" >>$filename
          else
            echo "SETTING because '${thekey}' found already"
            sed -ir "s|^[#]*\s*${thekey}=.*|$thekey=$newvalue|" $filename
          fi
        }

        if [[ -f $(workspaces.sonar-settings.path)/sonar-project.properties ]]; then
          echo "using user provided sonar-project.properties file"
          cp -RL $(workspaces.sonar-settings.path)/sonar-project.properties $(workspaces.source-dir.path)/sonar-project.properties
        fi

        if [[ -f $(workspaces.source-dir.path)/sonar-project.properties ]]; then
          if [[ -n "$(params.SONAR_HOST_URL)" ]]; then
            replaceValues $(workspaces.source-dir.path)/sonar-project.properties sonar.host.url $(params.SONAR_HOST_URL)
          fi
          if [[ -n "$(params.SONAR_PROJECT_KEY)" ]]; then
            replaceValues $(workspaces.source-dir.path)/sonar-project.properties sonar.projectKey $(params.SONAR_PROJECT_KEY)
          fi
        else
          touch sonar-project.properties
          echo "sonar.projectKey=$(params.SONAR_PROJECT_KEY)" >> sonar-project.properties
          echo "sonar.host.url=$(params.SONAR_HOST_URL)" >> sonar-project.properties
          echo "sonar.sources=." >> sonar-project.properties
        fi

        echo "---------------------------"
        cat $(workspaces.source-dir.path)/sonar-project.properties

    - name: sonar-scan
      image: docker.io/sonarsource/sonar-scanner-cli:4.5@sha256:b8c95a37025f3c13162118cd55761ea0b2a13d1837f9deec51b7b6d82c52040a #tag: 4.5
      workingDir: $(workspaces.source-dir.path)
      command:
        - sonar-scanner
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sonar-properties
data:
  sonar-project.properties: "# required metdata\nsonar.projectKey=sonar-test\nsonar.login=admin\nsonar.projectVersion=0.1\nsonar.sourceEncoding=UTF-8\n
    sonar.password=tmax@23\nsonar.sources=src/main/java/\nsonar.language=java\nsonar.java.binaries=src/main/java"
---
apiVersion: tmax.io/v1
kind: ClusterTemplate
metadata:
  name: gradle-image-integrationconfig-template
parameters:
  - name: CONFIG_NAME
    displayName: ConfigName
    description: Integration Config Name
    required: true
    valueType: string
  - name: CONFIG_SECRET
    displayName: ConfigSecret
    description: Secret to be included in Service Account (Usually docker hub secret)
    required: false
    valueType: string
  - name: GIT_TYPE
    displayName: GitType
    description: Git repo type (github/gitlab)
    required: true
    valueType: string
  - name: GIT_API_URL
    displayName: GitApiUrl
    description: Git repo API Server URL
    required: false
    value: ""
    valueType: string
  - name: GIT_REPO
    displayName: GitRepo
    description: Git repo path (ex. tmax-cloud/bookinfo-common)
    required: true
    valueType: string
  - name: TOKEN_SECRET_NAME
    displayName: TokenSecretName
    description: Name of secret containing token info
    required: true
    valueType: string
  - name: WORKSPACE_NAME
    displayName: WorkspaceName
    description: Workspace Name
    required: true
    valueType: string
  - name: PVC_NAME
    displayName: PVCName
    description: PVC Name
    requierd: true
    valueType: string
  - name: SONAR_HOST_URL_TPL
    displayName: SonarHostURL
    description: URL of sonarqube
    required: true
    valueType: string
  - name: SONAR_PROJECT_KEY_TPL
    displayName: SonarProjectKey
    description: Sonar project key. If not defined, use default sonar property.
    required: false
    valueType: string
  - name: JAR_NAME
    displayName: JarName
    description: Target Jar Name
    required: true
    valueType: string
  - name: REGISTRY_URL
    displayName: RegistryURL
    description: Registry URL
    required: true
    valueType: string
  - name: IMG_PATH
    displayName: ImagePath
    description: Image Path
    required: true
    valueType: string
  - name: REG_USER
    displayName: RegUser
    description: Registry User Name
    required: true
    valueType: string
  - name: REG_PASS
    displayName: RegPass
    description: Registry password
    required: true
    valueType: string
objects:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${PVC_NAME}
    spec:
      resources:
        requests:
          storage: 1Gi
      volumeMode: Filesystem
      accessModes:
        - ReadWriteOnce
  - apiVersion: cicd.tmax.io/v1
    kind: IntegrationConfig
    metadata:
      name: ${CONFIG_NAME}
    spec:
      git:
        type: ${GIT_TYPE}
        apiUrl: ${GIT_API_URL}
        repository: ${GIT_REPO}
        token:
          valueFrom:
            secretKeyRef:
              name: ${TOKEN_SECRET_NAME}
              key: token
      workspaces:
        - name: ${WORKSPACE_NAME}
          persistentVolumeClaim:
            claimName: ${PVC_NAME}
        - name: sonar-settings
          configMap:
            name: sonar-properties
      secrets:
        - name: ${CONFIG_SECRET}
      jobs:
        preSubmit:
          - name: copy-source
            image: docker.io/alpine:3.13.6
            script: |
              cp -r ./src $(workspaces.${WORKSPACE_NAME}.path)/src
            when:
              branch:
                - main
          - name: code-analysis
            tektonTask:
              taskRef:
                local:
                  name: sonarqube-scanner
                  kind: Task
              params:
                - name: SONAR_HOST_URL
                  stringVal: ${SONAR_HOST_URL_TPL}
                - name: SONAR_PROJECT_KEY
                  stringVal: ${SONAR_PROJECT_KEY_TPL}
              workspaces:
                - name: source-dir
                  workspace: ${WORKSPACE_NAME}
                - name: sonar-settings
                  workspace: sonar-settings
            after:
              - copy-source
            when:
              branch:
                - main
        postSubmit:
          - name: copy-source
            image: docker.io/alpine:3.13.6
            script: |
              cp -r ./src $(workspaces.${WORKSPACE_NAME}.path)/src
            when:
              branch:
                - main
          - name: code-analysis
            tektonTask:
              taskRef:
                local:
                  name: sonarqube-scanner
                  kind: Task
              params:
                - name: SONAR_HOST_URL
                  stringVal: ${SONAR_HOST_URL_TPL}
                - name: SONAR_PROJECT_KEY
                  stringVal: ${SONAR_PROJECT_KEY_TPL}
              workspaces:
                - name: source-dir
                  workspace: ${WORKSPACE_NAME}
                - name: sonar-settings
                  workspace: sonar-settings
            after:
              - copy-source
            when:
              branch:
                - main
          - name: s2i-gradle-generate
            image: docker.io/tmaxcloudck/cicd-util:5.0.5
            when:
              tag:
                - v.*
            script: |
              /usr/local/bin/s2i \
              build . docker.io/changjjjjjjjj/s2i-gradle-java:dev \
              --env JAR_NAME=${JAR_NAME} \
              --tlsverify=false \
              --as-dockerfile $(workspaces.${WORKSPACE_NAME}.path)/Dockerfile.gen
          - name: build-and-push
            image: quay.io/buildah/stable
            script: |
              IMG_TAG=${CI_HEAD_REF#refs/tags/}
              buildah bud --tls-verify=false --storage-driver=vfs --format docker -f $(workspaces.${WORKSPACE_NAME}.path)/Dockerfile.gen -t ${REGISTRY_URL}/${IMG_PATH}:$IMG_TAG $(workspaces.${WORKSPACE_NAME}.path)
              buildah login --tls-verify=false -u ${REG_USER} -p ${REG_PASS} ${REGISTRY_URL}
              buildah push --tls-verify=false --storage-driver=vfs ${REGISTRY_URL}/${IMG_PATH}:${IMG_TAG} docker://${REGISTRY_URL}/${IMG_PATH}:$IMG_TAG
            securityContext:
              privileged: true
            after:
              - s2i-gradle-generate
            when:
              tag:
                - v.*
          - name: image-scan
            image: docker.io/bitnami/trivy:latest
            script: |
              IMG_TAG=${CI_HEAD_REF#refs/tags/}
              TRIVY_INSECURE=true trivy image ${REGISTRY_URL}/${IMG_PATH}:${IMG_TAG}
            securityContext:
              privileged: true
            after:
              - build-and-push
            when:
              tag:
                - v.*
---
apiVersion: tmax.io/v1
kind: TemplateInstance
metadata:
  name: bookinfo-rating-ic-instance
  namespace: default
spec:
  clustertemplate:
    metadata:
      name: gradle-image-integrationconfig-template
    parameters:
      - name: CONFIG_NAME
        value: bookinfo-rating-config
      - name: CONFIG_SECRET
        value: tmaxcloudck-docker-hub-secret
      - name: GIT_TYPE
        value: github
      - name: GIT_REPO
        value: tmax-cloud/bookinfo-rating
      - name: TOKEN_SECRET_NAME
        value: yxzzzxh-git-token
      - name: WORKSPACE_NAME
        value: rating-workspace
      - name: PVC_NAME
        value: rating-pvc
      - name: SONAR_HOST_URL_TPL
        value: http://sonarqube.172.22.11.16.nip.io
      - name: SONAR_PROJECT_KEY_TPL
        value: rating-sonar
      - name: JAR_NAME
        value: rating.jar
      - name: REGISTRY_URL
        value: core.hr.172.22.11.16.nip.io
      - name: IMG_PATH
        value: shinhan-bookinfo/bookinfo-rating
      - name: REG_USER
        value: admin
      - name: REG_PASS
        admin: admin